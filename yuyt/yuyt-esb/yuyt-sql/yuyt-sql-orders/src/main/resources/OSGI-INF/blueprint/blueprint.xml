<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to Kingmed
-->
<blueprint
    xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:broker="http://activemq.apache.org/schema/core"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <cm:property-placeholder persistent-id="com.kingmed.yuyt">
        <cm:default-properties>
        </cm:default-properties>
    </cm:property-placeholder>
    <reference id="yuytDataSource" interface="javax.sql.DataSource" filter="(datasource.name=yuyt)">
        <reference-listener bind-method="onBind" unbind-method="onUnbind">
            <bean class="com.kingmed.yuyt.sql.ListenerBean"/>
        </reference-listener>
    </reference>
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="yuytDataSource"/>
    </bean>    
    <reference id="connectionFactory" interface="javax.jms.ConnectionFactory" />
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="${mq_url}"/>
    </bean>
    <bean id = "hospitalCache" class="com.kingmed.yuyt.cache.HospitalCache"  init-method="init">
        <property name="dataSource" ref="yuytDataSource"/>
    </bean>
    <bean id = "lisNodeCache" class="com.kingmed.yuyt.cache.LISNodeCache"  init-method="init">
        <property name="dataSource" ref="yuytDataSource"/>
    </bean>
    <bean id = "lisClientCache" class="com.kingmed.yuyt.cache.LISClientCache"  init-method="init">
        <property name="lisNodeCache" ref="lisNodeCache"/>
        <property name="hospitalCache" ref="hospitalCache"/>
    </bean>
    <bean id="panZhiBean" class="com.kingmed.yuyt.bean.PanzhiBean" init-method="init">
        <property name="orgId" value="${sms_orgid}"/>
        <property name="username" value="${sms_username}"/>
        <property name="password" value="${sms_password}"/>
        <property name="serverUrl" value="${sms_server_url}"/>
    </bean>
    <bean id="specimenBean" class="com.kingmed.yuyt.bean.SpecimenBean">
        <property name="lisClientCache" ref="lisClientCache"/>
    </bean>
    <bean id="specimenResponseBean" class="com.kingmed.yuyt.bean.SpecimenResponseBean"/>
    <bean id="reportBean" class="com.kingmed.yuyt.bean.ReportBean">
        <property name="lisClientCache" ref="lisClientCache"/>
    </bean>
    <bean id="reportResponseBean" class="com.kingmed.yuyt.bean.ReportResponseBean">
        <property name="hpvHighRish17">
            <list>
                <value>人乳头瘤病毒16型</value>
                <value>人乳头瘤病毒18型</value>
                <value>人乳头瘤病毒26型</value>
                <value>人乳头瘤病毒31型</value>
                <value>人乳头瘤病毒33型</value>
                <value>人乳头瘤病毒35型</value>
                <value>人乳头瘤病毒39型</value>
                <value>人乳头瘤病毒45型</value>
                <value>人乳头瘤病毒51型</value>
                <value>人乳头瘤病毒52型</value>
                <value>人乳头瘤病毒53型</value>
                <value>人乳头瘤病毒56型</value>
                <value>人乳头瘤病毒58型</value>
                <value>人乳头瘤病毒59型</value>
                <value>人乳头瘤病毒66型</value>
                <value>人乳头瘤病毒68型</value>
                <value>人乳头瘤病毒82型</value>
            </list>
        </property>
    </bean>
    <bean id="smsBean" class="com.kingmed.yuyt.bean.SMSBean">
        <property name="panZhiBean" ref="panZhiBean"/>
    </bean>
    <bean id="smsResponseBean" class="com.kingmed.yuyt.bean.SMSResponseBean"/>
    
    <camelContext xmlns="http://camel.apache.org/schema/blueprint">
        
        <propertyPlaceholder id="placeholder" location="classpath:sql.properties"/>
        <!-- 转换标本信息 -->
        <route id="uploadSpec1-route">
            <from uri="sql:{{sql.selectSpecRcved}}?consumer.useFixedDelay=true&amp;consumer.delay=20000"/>
            <to uri="bean:specimenBean?method=convertSpecimen"/>
            <to uri="sql:{{sql.insertLog}}"/>
            <log message="上传标本信息，已到log ${body[doc_id]}"/>
        </route>
        <!-- 上传标本信息 写入到消息队列 -->
        <route id="uploadSpec2-route">
            <from uri="sql:{{sql.selectMsg}}?consumer.onConsume={{sql.markSpecOut}}"/>
            <setBody>
                <simple>${body[msg]}</simple>
            </setBody>
            <to uri="activemq:queue:q_specimen_req" />
            <log message="上传标本信息，已到MQ请求队列 ${body}"/>
        </route>
        
        <!-- 上传标本信息，从消息队列写入到LIS中 -->
        <route id="uploadSpec3-route">
            <from uri="activemq:queue:q_specimen_req" />
            <to uri="bean:specimenBean" />
            <to uri="activemq:queue:q_specimen_res" />
            <log message="上传标本信息，已到MQ返回队列，${body}"/>
        </route>
        
        <!-- 上传标本信息，将返回信息从消息队列写入到域医通数据库中 -->
        <route id="uploadSpec4-route">
            <from uri="activemq:queue:q_specimen_res" />
            <to uri="bean:specimenResponseBean" />
            <choice>
                <when>
                    <simple>${body[status]} == '0' </simple>
                    <to uri="sql:{{sql.markSpecPlaced}}" />
                    <to uri="sql:{{sql.markSpecAccepted}}" />
                    <to uri="sql:{{sql.markSpecReporting}}" />
                    <log message="上传标本信息，标本信息已经上传到LIS，${body}"/>
                </when>
                <when>
                    <simple>${body[status]} != '0' </simple>
                    <log message="上传标本信息,失败, 还原LOG状态 ${body}"/>
                    <to uri = "sql: {{sql.markSpecNew}}"/>
                </when>
            </choice>
        </route>
       
        <!-- 查询报告单，组装报文 -->
        <route id="queryReport1-route">
            <from uri="sql:{{sql.selectQueryReport}}?consumer.useFixedDelay=true&amp;consumer.delay=30000"/>
            <to uri="bean:reportBean?method=convertReport"/>
            <to uri="sql:{{sql.insertLog}}"/>
            <log message="查询报告单，请求，已到log ${body[doc_id]}"/>
        </route>
        <!-- 查询报告单，从域医通数据库写入到消息队列 -->
        <route id="queryReport2-route">
            <from uri="sql:{{sql.selectMsgQR}}?consumer.onConsume={{sql.markMsgQROut}}&amp;consumer.delay=40000"/>
            <setBody>
                <simple>${body[msg]}</simple>
            </setBody>
            <to uri="activemq:queue:q_report_req" />
            <log message="查询报告单，请求, 已到MQ ${body}"/>
        </route>
        <!-- 查询报告单，从LIS写入到消息队列 -->
        <route id="queryReport3-route">
            <from uri="activemq:queue:q_report_req" />
            <to uri="bean:reportBean" />
            <to uri="activemq:queue:q_report_res" />
            <log message="查询报告单，响应, 已到MQ ${body}"/>
        </route>
        <!-- 查询报告单，将返回信息从消息队列写入到域医通数据库中 -->
        <route id="queryReport4-route">
            <from uri="activemq:queue:q_report_res"/>
            <to uri="bean:reportResponseBean" />
            <to uri="sql:{{sql.insertLog}}"/>
            <log message="查询报告单，响应，已到LIS，将报告单内容插入日志，${body[doc_id]}"/>
            <choice>
                <when>
                    <simple>${body[report_status]} == '0' </simple>
                    <log message="查询报告单，响应，报告单已签发，更新标本表 report doc id ${body[doc_id]}, spec doc id ${body[spec_doc_id]}"/>
                    <to uri="sql:{{sql.markSpecReported4Log}}"/>
                    <to uri="sql:{{sql.markSpecReported}}"/>
                    <to uri="sql:{{sql.markReported}}"/>
                </when>
                <when>
                    <simple>${body[IsReimbu]} == '1'</simple>
                    <log message="查询报告单，响应，实验室退单"/>
                    <to uri = "sql:{{sql.markSpecReported4Log}}"/>
                    <to uri = "sql: {{sql.markSpecReportReimbu}}"/>
                    <to uri = "sql: {{sql.marSpecReimbu}}"/>
                </when>
                <when>
                    <simple>${body[speStatus]} == 'A'</simple>
                    <log message="查询报告单，响应，已接收"/>
                    <to uri = "sql: {{sql.markMsgNew}}"/>
                    <to uri = "sql: {{sql.deleteMsg}}"/>
                </when>
                <when>
                    <simple>${body[report_status]} == '#211 检验报告未出！'</simple>
                    <log message="查询报告单，响应，检测中"/>
                    <to uri = "sql: {{sql.markSpecReportTesting}}"/>
                    <to uri = "sql: {{sql.markSpecTesting}}"/>
                    <to uri = "sql: {{sql.markMsgNew}}"/>
                    <to uri = "sql: {{sql.deleteMsg}}"/>
                </when>
            </choice>
        </route>
        <!-- 发送阳性召回SMS -->
        <route id="sendSMS1-route">
            <from uri="sql:{{sql.selectSMS}}"/>
            <to uri="bean:smsBean?method=convertSMS"/>
            <to uri="sql:{{sql.insertLog}}"/>
            <log message="已经转换SMS ${body[doc_id]}"/>
        </route>
        <!-- 发送阳性召回SMS 写入到消息队列 -->
        <route id="sendSMS2-route">
            <from uri="sql:{{sql.selectMsgSMS}}?consumer.onConsume={{sql.markMsgSMSOut}}"/>
            <setBody>
                <simple>${body[msg]}</simple>
            </setBody>
            <to uri="activemq:queue:q_sms_req" />
            <log message="SMS报文已经到MQ ${body}"/>
        </route>
        <!-- 发送阳性召回SMS，从消息队列写入到短信服务器中 -->
        <route id="sendSMS3-route">
            <from uri="activemq:queue:q_sms_req" />
            <to uri="bean:smsBean" />
            <to uri="activemq:queue:q_sms_res" />
        </route>
        <!-- 发送阳性召回SMS，将返回信息从消息队列写入到域医通数据库中 -->
        <route id="sendSMS4-route">
            <from uri="activemq:queue:q_sms_res" />
            <to uri="bean:smsResponseBean" />
            <to uri="sql:{{sql.insertLog}}"/>
            <log message="阳性召回短信息的返回值，记录返回值,${body}"/>
            <to uri="sql:{{sql.markMsgSMSPlaced}}" />
            <log message="阳性召回短信息的返回值，处理中,${body}"/>
            <to uri="sql:{{sql.markSMSStatus}}" />
            <log message="阳性召回短信息的返回值，处理完毕,${body}"/>
        </route>
    </camelContext>
</blueprint>